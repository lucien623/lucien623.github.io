<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucien</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dujianping.com/"/>
  <updated>2017-08-12T08:33:55.000Z</updated>
  <id>http://www.dujianping.com/</id>
  
  <author>
    <name>Lucien</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重拾 DSA 之栈</title>
    <link href="http://www.dujianping.com/2017/08/12/%E9%87%8D%E6%8B%BE-DSA-%E4%B9%8B%E6%A0%88/"/>
    <id>http://www.dujianping.com/2017/08/12/重拾-DSA-之栈/</id>
    <published>2017-08-12T08:15:03.000Z</published>
    <updated>2017-08-12T08:33:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>下面是 wikipedia 对于栈的定义：</p>
<blockquote>
<p><strong>堆栈</strong> （英语：stack），也可直接称栈（港澳台作堆叠），在计算机科学中，是一种特殊的串列形式的数据结构，它的特殊之处在于只能允许在链接串列或阵列的一端（称为堆叠顶端指标，英语：top）进行加入数据（英语：push）和输出数据（英语：pop）的运算。另外栈也可以用一维数组或连结串列的形式来完成。<br>由于堆叠数据结构只允许在一端进行操作，因而按照后进先出（LIFO, Last In First Out）的原理运作。</p>
</blockquote>
<p>简单示意图：<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Data_stack.svg/391px-Data_stack.svg.png" alt=""></p>
<p>这里使用 LinkedList 存储数据</p>
<ul>
<li>入栈</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">	mList.addFirst(t);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>出栈</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(!mList.isEmpty()) &#123;</div><div class="line">		mList.removeFirst();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>获取栈顶数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getPop</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> mList.getFirst();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/lucien623/DSA_Review/blob/master/Stack.java" target="_blank" rel="external">Source Code</a></p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了栈的基本知识。
    
    </summary>
    
      <category term="技术" scheme="http://www.dujianping.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="DSA" scheme="http://www.dujianping.com/tags%C3%9F/DSA/"/>
    
  </entry>
  
  <entry>
    <title>重拾  DSA 之链表</title>
    <link href="http://www.dujianping.com/2017/08/11/%E9%87%8D%E6%8B%BE-DSA-%E4%B9%8B%E9%93%BE%E8%A1%A8/"/>
    <id>http://www.dujianping.com/2017/08/11/重拾-DSA-之链表/</id>
    <published>2017-08-11T07:40:59.000Z</published>
    <updated>2017-08-12T08:23:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>下面是 wikipedia 对于链表的定义：</p>
<blockquote>
<p><strong>链表</strong>（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到   O(1) 的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要 O(n) 的时间，而顺序表相应的时间复杂度分别是O(logn) 和 O(1)。</p>
</blockquote>
<ul>
<li>添加<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object data)</span> </span>&#123;</div><div class="line">	<span class="comment">//如果头节点为空，则创建一个新节点，并将其设置为头节点以及当前节点。</span></div><div class="line">	<span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</div><div class="line">		head = <span class="keyword">new</span> Node(data);</div><div class="line">		current = head;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		current.next = <span class="keyword">new</span> Node(data);</div><div class="line">		current = current.next;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>插入<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, Object data)</span> </span>&#123;</div><div class="line">	current = head;</div><div class="line">	<span class="keyword">if</span>(index == <span class="number">0</span>) &#123;</div><div class="line">		head = <span class="keyword">new</span> Node(data);</div><div class="line">		head.next = current;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	Node preNode = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">while</span>(current != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">if</span>((<span class="keyword">int</span>)current.data == index) &#123;</div><div class="line">			Node node = <span class="keyword">new</span> Node(data);</div><div class="line">			preNode.next = node;</div><div class="line">			node.next = current;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		preNode = current;</div><div class="line">		current = current.next;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>删除<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">	current = head;</div><div class="line">	<span class="keyword">int</span> pos = <span class="number">0</span>;</div><div class="line">	Node preNode = head;</div><div class="line">	<span class="keyword">while</span>(current != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">if</span>(pos == index) &#123;</div><div class="line">			<span class="keyword">if</span>(pos == <span class="number">0</span>)</div><div class="line">				head = current.next;</div><div class="line">			<span class="comment">//判断当前节点是否还有下一个节点，有则将前一个节点的next指向下一个节点，</span></div><div class="line">			<span class="comment">//无则将前一个节点的next指向设置为null</span></div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">if</span>(current.next != <span class="keyword">null</span>) &#123;</div><div class="line">					preNode.next = current.next;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">					preNode.next = <span class="keyword">null</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		preNode = current;</div><div class="line">		current = current.next;</div><div class="line">		pos++;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>查找<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">private</span> Node <span class="title">find</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">	current = head;</div><div class="line">	<span class="keyword">int</span> pos = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(current != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">if</span>(index == pos) &#123;</div><div class="line">			<span class="keyword">return</span> current;</div><div class="line">		&#125;</div><div class="line">		current = current.next;</div><div class="line">		pos++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>获取链表中节点的个数<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getLinkListLength</span><span class="params">()</span> </span>&#123;</div><div class="line">	current = head;</div><div class="line">	<span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(current != <span class="keyword">null</span>) &#123;</div><div class="line">		length++;</div><div class="line">		current = current.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> length;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>链表反转<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverseLinkList</span><span class="params">()</span> </span>&#123;</div><div class="line">	current = head;</div><div class="line">	<span class="keyword">while</span>(current != <span class="keyword">null</span>) &#123;</div><div class="line">		Node preHead = reverseHead;</div><div class="line">		reverseHead = current;</div><div class="line">		current = current.next;</div><div class="line">		<span class="keyword">if</span>(preHead != <span class="keyword">null</span>) &#123;</div><div class="line">			reverseHead.next = preHead;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			reverseHead.next = <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>链表反转（递归方式）<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">private</span> Node <span class="title">reverseLinkListRec</span><span class="params">(Node head)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> head;</div><div class="line">	Node newHead = reverseLinkListRec(head.next);</div><div class="line">	head.next.next = head;</div><div class="line">	head.next = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">return</span> newHead;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>获取倒数第 index 节点（先让当前节点移动到第 index 个节点，再创建一个节点 start 指向头节点，当前节点和 start 节点同时移动，当当前节点移动到最后一个节点时，start 指向的便是倒数第 index 节点）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">getReciprocalNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(index == <span class="number">0</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	current = head;</div><div class="line">	Node start = head;</div><div class="line">	<span class="keyword">while</span>(current != <span class="keyword">null</span>) &#123;</div><div class="line">		index--;</div><div class="line">		<span class="keyword">if</span>(index == <span class="number">0</span>)</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		current = current.next;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 长度大于链表长度</span></div><div class="line">	<span class="keyword">if</span>(current == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span>(current.next != <span class="keyword">null</span>) &#123;</div><div class="line">		current = current.next;</div><div class="line">		start = start.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> start;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>获取链表的中间节点(初始化两个节点都指向头节点，一个节点每次移动一个节点，另一个每次移动两个节点，当第二个节点移动到链表末尾时，第一个节点指向的节点即是链表的中间节点)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">private</span> Node <span class="title">getMiddleNode</span><span class="params">()</span> </span>&#123;</div><div class="line">	Node oneStepNode = head;</div><div class="line">	Node twoStepNode = head;</div><div class="line">	<span class="comment">//加入小于三个节点则返回第一个节点作为中间节点</span></div><div class="line">	<span class="keyword">if</span>(head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">return</span> current;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span>(twoStepNode.next != <span class="keyword">null</span> &amp;&amp; twoStepNode.next.next != <span class="keyword">null</span>) &#123;</div><div class="line">		twoStepNode = twoStepNode.next.next;</div><div class="line">		oneStepNode = oneStepNode.next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> oneStepNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="https://github.com/lucien623/DSA_Review/blob/master/LinkList.java" target="_blank" rel="external">Source Code</a></p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了链表的一些操作。
    
    </summary>
    
      <category term="技术" scheme="http://www.dujianping.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="DSA" scheme="http://www.dujianping.com/tags%C3%9F/DSA/"/>
    
  </entry>
  
  <entry>
    <title>Android事件分发</title>
    <link href="http://www.dujianping.com/2017/07/11/android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
    <id>http://www.dujianping.com/2017/07/11/android事件分发/</id>
    <published>2017-07-11T09:06:00.000Z</published>
    <updated>2017-08-04T05:53:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android 中和事件分发相关的主要有三个方法，分别是 dispatchTouchEvent(…)、onInterceptTouchEvent(…) 和 onTouchEvent(…)，主要作用是分发事件、是否拦截事件以及处理事件，这些方法的返回值决定了 Touch 事件的传递方向，方法的包涵情况具体如下表所示：</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">dispatchTouchEvent(…)</th>
<th style="text-align:center">onInterceptTouchEvent(…)</th>
<th style="text-align:center">onTouchEvent(…)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Activity</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">no</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td>ViewGroup</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td>view</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">no</td>
<td style="text-align:center">yes</td>
</tr>
</tbody>
</table>
<p>以下为事件分发流程图（针对于 ACTION_DOWN 事件，可点击查看大图）</p>
<p><img src="http://ohsz38osq.bkt.clouddn.com/touchevent.png?imageView2/0/q/75|watermark/2/text/d3d3LmR1amlhbnBpbmcuY29t/font/5b6u6L2v6ZuF6buR/fontsize/240/fill/IzlFOTg5OA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p>
<p>如图所示的事件传递流向已十分清晰，demo 也十分易写，只需自行重写这些方法，打印日志便可验证。</p>
<p>对于 ACTION_MOVE 和 ACTION_UP 事件的传递则略有不同，它们的传递和 ACTION_DOWN 事件传递的终点相关，以下举例。</p>
<h4 id="1）在-View-的-onTouchEvent-消费事件，即-return-true。"><a href="#1）在-View-的-onTouchEvent-消费事件，即-return-true。" class="headerlink" title="1）在 View 的 onTouchEvent 消费事件，即 return true。"></a>1）在 View 的 onTouchEvent 消费事件，即 return true。</h4><p>日志：</p>
<p><img src="http://ohsz38osq.bkt.clouddn.com/touchevent_2_log.png?imageView2/0/q/75|watermark/2/text/d3d3LmR1amlhbnBpbmcuY29t/font/5b6u6L2v6ZuF6buR/fontsize/240/fill/IzlFOTg5OA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p>
<p>事件传递的流向图：</p>
<p><img src="http://ohsz38osq.bkt.clouddn.com/touchevent_2.png?imageView2/0/q/75|watermark/2/text/d3d3LmR1amlhbnBpbmcuY29t/font/5b6u6L2v6ZuF6buR/fontsize/240/fill/IzlFOTg5OA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p>
<h4 id="2）在-ViewGroup-的-onTouchEvent-…-消费事件，即-return-true。"><a href="#2）在-ViewGroup-的-onTouchEvent-…-消费事件，即-return-true。" class="headerlink" title="2）在 ViewGroup 的 onTouchEvent(…) 消费事件，即 return true。"></a>2）在 ViewGroup 的 onTouchEvent(…) 消费事件，即 return true。</h4><p>日志：</p>
<p><img src="http://ohsz38osq.bkt.clouddn.com/touchevent_1_log.png?imageView2/0/q/75|watermark/2/text/d3d3LmR1amlhbnBpbmcuY29t/font/5b6u6L2v6ZuF6buR/fontsize/240/fill/IzlFOTg5OA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p>
<p>事件传递的流向图：</p>
<p><img src="http://ohsz38osq.bkt.clouddn.com/touchevent_1.png?imageView2/0/q/75|watermark/2/text/d3d3LmR1amlhbnBpbmcuY29t/font/5b6u6L2v6ZuF6buR/fontsize/240/fill/IzlFOTg5OA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p>
<h4 id="3）在-ViewGroup-的-dispatchTouchEvent-…-方法中-return-false。"><a href="#3）在-ViewGroup-的-dispatchTouchEvent-…-方法中-return-false。" class="headerlink" title="3）在 ViewGroup 的 dispatchTouchEvent(…) 方法中 return false。"></a>3）在 ViewGroup 的 dispatchTouchEvent(…) 方法中 return false。</h4><p>日志：</p>
<p><img src="http://ohsz38osq.bkt.clouddn.com/touchevent_3_log.png?imageView2/0/q/75|watermark/2/text/d3d3LmR1amlhbnBpbmcuY29t/font/5b6u6L2v6ZuF6buR/fontsize/240/fill/IzlFOTg5OA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p>
<p>事件传递流向图：</p>
<p><img src="http://ohsz38osq.bkt.clouddn.com/touchevent_3.png?imageView2/0/q/75|watermark/2/text/d3d3LmR1amlhbnBpbmcuY29t/font/5b6u6L2v6ZuF6buR/fontsize/240/fill/IzlFOTg5OA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android 中和事件分发相关的主要有三个方法，分别是 dispatchTouchEvent(…)、onInterceptTouchEvent(…) 和 onTouchEvent(…)，主要作用是分发事件、是否拦截事件以及处理事件，这些方法的返回值决定了 Touch 事件
    
    </summary>
    
      <category term="技术" scheme="http://www.dujianping.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="android" scheme="http://www.dujianping.com/tags%C3%9F/android/"/>
    
  </entry>
  
  <entry>
    <title>Activity生命周期</title>
    <link href="http://www.dujianping.com/2017/07/10/Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://www.dujianping.com/2017/07/10/Activity生命周期/</id>
    <published>2017-07-10T03:37:39.000Z</published>
    <updated>2017-08-04T05:52:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Activity 是 Android 四大组件之一，它主要给用户提供了一个交互页面，用户通过它与app进行交互，以执行各种操作。 每个 Activity 都会获得一个用于绘制其用户界面的窗口。窗口通常会充满屏幕，但也可小于屏幕并浮动在其他窗口之上（将 Activity 的 theme 设置为 Dialog）。Activity 生命周期中主要的七个回调方法介绍如下表：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>onCreate()</td>
<td>Activity 创建的时候调用,可以在方法里做一些初始化的操作，比如初始化试图，获取从上一个页面传递过来的数据，此时处于不可见状态。</td>
</tr>
<tr>
<td>onRestart()</td>
<td>在 Activity 已停止并即将再次启动前调用。</td>
</tr>
<tr>
<td>onStart()</td>
<td>Activity 处于可见状态，但不能操作，因为并未获取到焦点。</td>
</tr>
<tr>
<td>onResume()</td>
<td>Activity 处于可见状态，并且能够获取到焦点，在 Activity 恢复时可以在此方法中刷新数据。</td>
</tr>
<tr>
<td>onPause()</td>
<td>当系统即将开始继续另一个 Activity 时调用。当此方法执行完才会启动下一个 Activity，此方法中可以做一些停止动画，释放一些资源的操作，但不适合一些比较耗时的操作，因为这样会导致跳转的时候卡顿。</td>
</tr>
<tr>
<td>onStop()</td>
<td>在 Activity 对用户不再可见时调用。如果 Activity 恢复交互，那么接下来会调用 onRestart() 方法，如果 Activity 销毁，那么将会调用 onDestory() 方法。</td>
</tr>
<tr>
<td>onDestory()</td>
<td>在 Activity 被销毁前调用。</td>
</tr>
</tbody>
</table>
<p><img src="https://developer.android.com/images/activity_lifecycle.png" alt="activity-life"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Activity 是 Android 四大组件之一，它主要给用户提供了一个交互页面，用户通过它与app进行交互，以执行各种操作。 每个 Activity 都会获得一个用于绘制其用户界面的窗口。窗口通常会充满屏幕，但也可小于屏幕并浮动在其他窗口之上（将 Activity 的 
    
    </summary>
    
      <category term="技术" scheme="http://www.dujianping.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="android" scheme="http://www.dujianping.com/tags%C3%9F/android/"/>
    
  </entry>
  
  <entry>
    <title>Activity启动模式</title>
    <link href="http://www.dujianping.com/2017/07/10/android-review-launchMode/"/>
    <id>http://www.dujianping.com/2017/07/10/android-review-launchMode/</id>
    <published>2017-07-10T03:13:35.000Z</published>
    <updated>2017-08-04T05:53:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="launchMode"><a href="#launchMode" class="headerlink" title="launchMode"></a>launchMode</h3><ul>
<li><p>standard<br>默认的启动方式，每次都会创建一个活动的实例。<br>task 1: A-B-C-D<br>add D<br>task 1: A-B-C-D-D</p>
</li>
<li><p>singleTop<br>当有活动实例存在于栈顶时，那么将不会生成一个新的活动实例，此时会调用栈顶实例的 onNewIntent() 方法。<br>task 1: A-B-C-D<br>add D<br>task 1: A-B-C-D</p>
</li>
<li><p>singleTask<br>当栈中存在该活动的实例时，那么启动活动时，栈中位于该活动实例上方的活动都将会被移除栈，并调用该活动的 onNewIntent();<br>task 1: A-B-C-D<br>add C<br>task 1: A-B-C</p>
</li>
<li><p>singleInstance<br>启动活动时会创建一个新的栈<br>task 1: A-B-C-D<br>add D<br>task 1: A-B-C-D<br>task 2: D<br>场景：<br>调用相机</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      简单介绍下在 Android 中的四种 Activity 启动模式。
    
    </summary>
    
      <category term="技术" scheme="http://www.dujianping.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="android" scheme="http://www.dujianping.com/tags%C3%9F/android/"/>
    
  </entry>
  
  <entry>
    <title>开始</title>
    <link href="http://www.dujianping.com/2017/03/26/%E5%BC%80%E5%A7%8B/"/>
    <id>http://www.dujianping.com/2017/03/26/开始/</id>
    <published>2017-03-26T12:37:12.000Z</published>
    <updated>2017-07-10T08:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个开始，开始寻找一个新的开始。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个开始，开始寻找一个新的开始。&lt;/p&gt;

    
    </summary>
    
      <category term="生活" scheme="http://www.dujianping.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>我有一个梦想</title>
    <link href="http://www.dujianping.com/2017/01/05/%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%A2%A6%E6%83%B3/"/>
    <id>http://www.dujianping.com/2017/01/05/我有一个梦想/</id>
    <published>2017-01-05T15:31:31.000Z</published>
    <updated>2017-07-10T08:58:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>我有一个梦想，那就是四处游荡，去往每一处我向往的地方。我希望体验不同的生活，每到一处就找一份工作，这份工作不必太辛劳，能有自己的时间，normal的工资，一年或者两年之后，go to the next one。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26590192&auto=0&height=66"></iframe>

]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我有一个梦想，那就是四处游荡，去往每一处我向往的地方。我希望体验不同的生活，每到一处就找一份工作，这份工作不必太辛劳，能有自己的时间，normal的工资，一年或者两年之后，go to the next one。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; bo
    
    </summary>
    
      <category term="生活" scheme="http://www.dujianping.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>2017年的书单 </title>
    <link href="http://www.dujianping.com/2017/01/01/2017%E5%B9%B4%E7%9A%84%E4%B9%A6%E5%8D%95/"/>
    <id>http://www.dujianping.com/2017/01/01/2017年的书单/</id>
    <published>2016-12-31T16:34:50.000Z</published>
    <updated>2017-08-11T07:49:55.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>《巨流河》 作者: 齐邦媛 </li>
<li>《人生的智慧》 作者: 叔本华 </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;《巨流河》 作者: 齐邦媛 &lt;/li&gt;
&lt;li&gt;《人生的智慧》 作者: 叔本华 &lt;/li&gt;
&lt;/ul&gt;

    
    </summary>
    
      <category term="生活" scheme="http://www.dujianping.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>2016年的尾巴</title>
    <link href="http://www.dujianping.com/2016/12/31/2016%E5%B9%B4%E7%9A%84%E5%B0%BE%E5%B7%B4/"/>
    <id>http://www.dujianping.com/2016/12/31/2016年的尾巴/</id>
    <published>2016-12-31T15:52:18.000Z</published>
    <updated>2017-08-04T05:46:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>2016年的最后一天是这样的<br><a id="more"></a></p>
<p>一部电影</p>
<p><img src="http://ohsz38osq.bkt.clouddn.com/WechatIMG3.jpeg?imageView2/0/q/75|watermark/2/text/d3d3LmR1amlhbnBpbmcuY29t/font/5b6u6L2v6ZuF6buR/fontsize/240/fill/IzlFOTg5OA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p>
<p>一场球赛</p>
<p><img src="http://ohsz38osq.bkt.clouddn.com/WechatIMG5.jpeg?imageView2/0/q/75|watermark/2/text/d3d3LmR1amlhbnBpbmcuY29t/font/5b6u6L2v6ZuF6buR/fontsize/240/fill/IzlFOTg5OA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p>
<p>以及<br>若干杯红酒</p>
<p><img src="http://ohsz38osq.bkt.clouddn.com/WechatIMG1.jpeg?imageView2/0/q/75|watermark/2/text/d3d3LmR1amlhbnBpbmcuY29t/font/5b6u6L2v6ZuF6buR/fontsize/240/fill/IzlFOTg5OA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p>
<p>2017 你好～</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016年的最后一天是这样的&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://www.dujianping.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
</feed>
